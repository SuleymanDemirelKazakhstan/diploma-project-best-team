{"ast":null,"code":"import { disposables } from '../../../utils/disposables.esm.js';\nimport { once } from '../../../utils/once.esm.js';\n\nfunction addClasses(node) {\n  var _node$classList;\n\n  for (var _len = arguments.length, classes = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    classes[_key - 1] = arguments[_key];\n  }\n\n  node && classes.length > 0 && (_node$classList = node.classList).add.apply(_node$classList, classes);\n}\n\nfunction removeClasses(node) {\n  var _node$classList2;\n\n  for (var _len2 = arguments.length, classes = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    classes[_key2 - 1] = arguments[_key2];\n  }\n\n  node && classes.length > 0 && (_node$classList2 = node.classList).remove.apply(_node$classList2, classes);\n}\n\nvar Reason;\n\n(function (Reason) {\n  Reason[\"Finished\"] = \"finished\";\n  Reason[\"Cancelled\"] = \"cancelled\";\n})(Reason || (Reason = {}));\n\nfunction waitForTransition(node, done) {\n  var d = disposables();\n  if (!node) return d.dispose; // Safari returns a comma separated list of values, so let's sort them and take the highest value.\n\n  var _getComputedStyle = getComputedStyle(node),\n      transitionDuration = _getComputedStyle.transitionDuration,\n      transitionDelay = _getComputedStyle.transitionDelay;\n\n  var _map = [transitionDuration, transitionDelay].map(function (value) {\n    var _value$split$filter$m = value.split(',') // Remove falsy we can't work with\n    .filter(Boolean) // Values are returned as `0.3s` or `75ms`\n    .map(function (v) {\n      return v.includes('ms') ? parseFloat(v) : parseFloat(v) * 1000;\n    }).sort(function (a, z) {\n      return z - a;\n    }),\n        _value$split$filter$m2 = _value$split$filter$m[0],\n        resolvedValue = _value$split$filter$m2 === void 0 ? 0 : _value$split$filter$m2;\n\n    return resolvedValue;\n  }),\n      durationMs = _map[0],\n      delaysMs = _map[1]; // Waiting for the transition to end. We could use the `transitionend` event, however when no\n  // actual transition/duration is defined then the `transitionend` event is not fired.\n  //\n  // TODO: Downside is, when you slow down transitions via devtools this timeout is still using the\n  // full 100% speed instead of the 25% or 10%.\n\n\n  if (durationMs !== 0) {\n    d.setTimeout(function () {\n      done(Reason.Finished);\n    }, durationMs + delaysMs);\n  } else {\n    // No transition is happening, so we should cleanup already. Otherwise we have to wait until we\n    // get disposed.\n    done(Reason.Finished);\n  } // If we get disposed before the timeout runs we should cleanup anyway\n\n\n  d.add(function () {\n    return done(Reason.Cancelled);\n  });\n  return d.dispose;\n}\n\nfunction transition(node, base, from, to, entered, done) {\n  var d = disposables();\n\n  var _done = done !== undefined ? once(done) : function () {};\n\n  removeClasses.apply(void 0, [node].concat(entered));\n  addClasses.apply(void 0, [node].concat(base, from));\n  d.nextFrame(function () {\n    removeClasses.apply(void 0, [node].concat(from));\n    addClasses.apply(void 0, [node].concat(to));\n    d.add(waitForTransition(node, function (reason) {\n      removeClasses.apply(void 0, [node].concat(to, base));\n      addClasses.apply(void 0, [node].concat(entered));\n      return _done(reason);\n    }));\n  }); // Once we get disposed, we should ensure that we cleanup after ourselves. In case of an unmount,\n  // the node itself will be nullified and will be a no-op. In case of a full transition the classes\n  // are already removed which is also a no-op. However if you go from enter -> leave mid-transition\n  // then we have some leftovers that should be cleaned.\n\n  d.add(function () {\n    return removeClasses.apply(void 0, [node].concat(base, from, to, entered));\n  }); // When we get disposed early, than we should also call the done method but switch the reason.\n\n  d.add(function () {\n    return _done(Reason.Cancelled);\n  });\n  return d.dispose;\n}\n\nexport { Reason, transition };","map":{"version":3,"mappings":"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","names":["disposables","once","addClasses","node","_node$classList","_len","arguments","length","classes","Array","_key","classList","add","apply","removeClasses","_node$classList2","_len2","_key2","remove","Reason","waitForTransition","done","d","dispose","_getComputedStyle","getComputedStyle","transitionDuration","transitionDelay","_map","map","value","_value$split$filter$m","split","filter","Boolean","v","includes","parseFloat","sort","a","z","_value$split$filter$m2","resolvedValue","durationMs","delaysMs","setTimeout","Finished","Cancelled","transition","base","from","to","entered","_done","undefined","concat","nextFrame","reason"],"sources":["C:/Users/Joka24/Desktop/diplom/node_modules/@headlessui/react/dist/components/transitions/utils/transition.esm.js"],"sourcesContent":["import { disposables } from '../../../utils/disposables.esm.js';\nimport { once } from '../../../utils/once.esm.js';\n\nfunction addClasses(node) {\n  var _node$classList;\n\n  for (var _len = arguments.length, classes = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    classes[_key - 1] = arguments[_key];\n  }\n\n  node && classes.length > 0 && (_node$classList = node.classList).add.apply(_node$classList, classes);\n}\n\nfunction removeClasses(node) {\n  var _node$classList2;\n\n  for (var _len2 = arguments.length, classes = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    classes[_key2 - 1] = arguments[_key2];\n  }\n\n  node && classes.length > 0 && (_node$classList2 = node.classList).remove.apply(_node$classList2, classes);\n}\n\nvar Reason;\n\n(function (Reason) {\n  Reason[\"Finished\"] = \"finished\";\n  Reason[\"Cancelled\"] = \"cancelled\";\n})(Reason || (Reason = {}));\n\nfunction waitForTransition(node, done) {\n  var d = disposables();\n  if (!node) return d.dispose; // Safari returns a comma separated list of values, so let's sort them and take the highest value.\n\n  var _getComputedStyle = getComputedStyle(node),\n      transitionDuration = _getComputedStyle.transitionDuration,\n      transitionDelay = _getComputedStyle.transitionDelay;\n\n  var _map = [transitionDuration, transitionDelay].map(function (value) {\n    var _value$split$filter$m = value.split(',') // Remove falsy we can't work with\n    .filter(Boolean) // Values are returned as `0.3s` or `75ms`\n    .map(function (v) {\n      return v.includes('ms') ? parseFloat(v) : parseFloat(v) * 1000;\n    }).sort(function (a, z) {\n      return z - a;\n    }),\n        _value$split$filter$m2 = _value$split$filter$m[0],\n        resolvedValue = _value$split$filter$m2 === void 0 ? 0 : _value$split$filter$m2;\n\n    return resolvedValue;\n  }),\n      durationMs = _map[0],\n      delaysMs = _map[1]; // Waiting for the transition to end. We could use the `transitionend` event, however when no\n  // actual transition/duration is defined then the `transitionend` event is not fired.\n  //\n  // TODO: Downside is, when you slow down transitions via devtools this timeout is still using the\n  // full 100% speed instead of the 25% or 10%.\n\n\n  if (durationMs !== 0) {\n    d.setTimeout(function () {\n      done(Reason.Finished);\n    }, durationMs + delaysMs);\n  } else {\n    // No transition is happening, so we should cleanup already. Otherwise we have to wait until we\n    // get disposed.\n    done(Reason.Finished);\n  } // If we get disposed before the timeout runs we should cleanup anyway\n\n\n  d.add(function () {\n    return done(Reason.Cancelled);\n  });\n  return d.dispose;\n}\n\nfunction transition(node, base, from, to, entered, done) {\n  var d = disposables();\n\n  var _done = done !== undefined ? once(done) : function () {};\n\n  removeClasses.apply(void 0, [node].concat(entered));\n  addClasses.apply(void 0, [node].concat(base, from));\n  d.nextFrame(function () {\n    removeClasses.apply(void 0, [node].concat(from));\n    addClasses.apply(void 0, [node].concat(to));\n    d.add(waitForTransition(node, function (reason) {\n      removeClasses.apply(void 0, [node].concat(to, base));\n      addClasses.apply(void 0, [node].concat(entered));\n      return _done(reason);\n    }));\n  }); // Once we get disposed, we should ensure that we cleanup after ourselves. In case of an unmount,\n  // the node itself will be nullified and will be a no-op. In case of a full transition the classes\n  // are already removed which is also a no-op. However if you go from enter -> leave mid-transition\n  // then we have some leftovers that should be cleaned.\n\n  d.add(function () {\n    return removeClasses.apply(void 0, [node].concat(base, from, to, entered));\n  }); // When we get disposed early, than we should also call the done method but switch the reason.\n\n  d.add(function () {\n    return _done(Reason.Cancelled);\n  });\n  return d.dispose;\n}\n\nexport { Reason, transition };\n"]},"metadata":{},"sourceType":"module"}